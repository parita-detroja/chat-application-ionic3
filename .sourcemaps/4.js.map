{"version":3,"sources":["../../src/pages/login/login.module.ts","../../src/pages/login/login.ts"],"names":[],"mappings":"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","file":"4.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { LoginPage } from './login';\n\n@NgModule({\n  declarations: [\n    LoginPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(LoginPage),\n  ],\n})\nexport class LoginPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/login/login.module.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, LoadingController } from 'ionic-angular';\n\nimport { LoghandlingProvider } from '../../providers/loghandling/loghandling';\nimport { AuthenticationProvider } from '../../providers/authentication/authentication';\n//import { ConstantProvider } from '../../providers/constant/constant';\n//import { ApihandlingProvider } from '../../providers/apihandling/apihandling';\nimport { usercredentials } from '../../models/interfaces/usercredentials';\n\n/**\n * Generated class for the LoginPage page.\n *\n * Login page provide user authentication using facebook.\n */\n\n@IonicPage()\n@Component({\n  selector: 'page-login',\n  templateUrl: 'login.html',\n})\nexport class LoginPage {\n\n  private TAG: string = \"LoginPage\";\n  credentials = {} as usercredentials;\n\n  /**\n   * Default constructor\n   * @param navCtrl navigation controller  \n   * @param loadingCtrl loading controller (loading indication)\n   * @param authenticationProvider authentication provider different auth methods\n   * @param loghandlingProvider log handler \n   * @param apihandlingProvider provider having methods for api calling \n   */\n  constructor(private navCtrl: NavController, private loadingCtrl: LoadingController,\n  private authenticationProvider: AuthenticationProvider, private loghandlingProvider: LoghandlingProvider, \n  /*private apihandlingProvider: ApihandlingProvider*/) {\n  }\n\n  /**\n   * Method called from login with facebook button for authenticating user with facebook.\n   */\n  loginWithFacebook() {\n    let loading = this.loadingCtrl.create();\n    loading.present();\n    this.authenticationProvider.signInWithFacebook()\n      .then((res) => {\n        this.loghandlingProvider.showLog(this.TAG, \"user get auth token\" + res.user);\n        loading.dismiss();\n      }, (error) => {\n        this.loghandlingProvider.showLog(this.TAG, \"from error block\" + error.message);\n        loading.dismiss();\n      });\n\n    /*this.loghandlingProvider.showLog(this.TAG, \"calling api\");\n    this.apihandlingProvider.callRequest(ConstantProvider.BASE_URL + \"getUserToChat\").subscribe(res => {\n      this.loghandlingProvider.showLog(this.TAG, res.name +\" : \"+ res.uid);\n    },err => {\n      this.loghandlingProvider.showLog(this.TAG, err.message);\n    });*/\n  }\n\n  /**\n   * Method called from login with google button for authenticating user with google.\n   */\n  loginWithGoogle(){\n    //google login \n  }\n\n  /**\n   * Method called from login with github button for authenticating user with github.\n   */\n  loginWithGithub(){\n    //github login\n  }\n\n  /**\n   * Method called from login button for authenticating user with firebase user email and password.\n   */\n  signin(){\n    let loading = this.loadingCtrl.create();\n    loading.present();\n     this.authenticationProvider.login(this.credentials).then((res: any) => {\n      if (!res.code){\n        this.loghandlingProvider.showLog(this.TAG, \"user get auth token\" + res.user);\n        this.updateProfile(res.user || res);\n        loading.dismiss();\n        this.navCtrl.setRoot('TabsPage');\n      }\n      else{\n        console.log(\"from error block\" + res);\n        loading.dismiss();\n        alert(res);\n      }\n    })\n  }\n\n  private updateProfile(user: any){\n    return this.authenticationProvider.updateProfile({\n      uid        : user.uid,\n      displayName: user.displayName,\n      email      : user.email,\n      photoURL   : user.photoURL,\n      providerData   : user.providerData[0]\n    });\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/login/login.ts"],"sourceRoot":""}